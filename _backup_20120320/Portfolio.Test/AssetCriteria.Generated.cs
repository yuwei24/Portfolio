//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v6.0.2, CSLA Templates: v3.1.0.2448, CSLA Framework: v4.0.0.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'Asset.cs'.
//
//     Template: Criteria.Generated.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
#region Using declarations

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

using Portfolio.Data;
using DAL=Portfolio.Data;
using Csla.Core;
#if SILVERLIGHT
using Csla.Serialization;
#endif
using Csla.Serialization.Mobile;

#if !SILVERLIGHT
using System.Data.SqlClient;
#endif

using Csla;

#endregion

namespace Portfolio.Business
{
    [Serializable]
    public partial class AssetCriteria : CriteriaBase<AssetCriteria>, IGeneratedCriteria
    {
        #region Private Read-Only Members
        
        private readonly Dictionary<string, object> _bag = new Dictionary<string, object>();
        
        #endregion
        
        #region Constructors

        public AssetCriteria(){}

        public AssetCriteria(System.Int32 identification)
        {
            Identification = identification;
        }
        
        #endregion
        
        #region Public Properties
        
        #region Read-Write

        public System.Int32 Identification
        {
            get { return GetValue< System.Int32 >("Id"); }
            set { _bag["Id"] = value; }
        }

        public System.Int32 FundId
        {
            get { return GetValue< System.Int32 >("FundId"); }
            set { _bag["FundId"] = value; }
        }

        public System.DateTime AssetDate
        {
            get { return GetValue< System.DateTime >("AssetDate"); }
            set { _bag["AssetDate"] = value; }
        }

        public System.Decimal Shares
        {
            get { return GetValue< System.Decimal >("Shares"); }
            set { _bag["Shares"] = value; }
        }

        public System.Decimal Assets
        {
            get { return GetValue< System.Decimal >("Assets"); }
            set { _bag["Assets"] = value; }
        }

        #endregion
        
        #region Read-Only

        /// <summary>
        /// Returns a list of all the modified properties and values.
        /// </summary>
        public Dictionary<string, object> StateBag
        {
            get
            {
                return _bag;
            }
        }

        /// <summary>
        /// Returns a list of all the modified properties and values.
        /// </summary>
        public string TableFullName
        {
            get
            {
                return "[dbo].[Assets]";
            }
        }

        public Type EntityType
        {
            get
            {
                return typeof(DAL.Assets);
            }
        }
		
        #endregion

        #endregion

        #region Overrides
        
        public override string ToString()
        {
            var result = string.Empty;
            var cancel = false;
            
            OnToString(ref result, ref cancel);
            if(cancel && !string.IsNullOrEmpty(result))
                return result;
            
            if (_bag.Count == 0)
                return "No criterion was specified.";

            foreach (KeyValuePair<string, object> key in _bag)
            {
                result += string.Format("[{0}] = '{1}' AND ", key.Key, key.Value);
            }

            return result.Remove(result.Length - 5, 5);
        }

        #endregion

        #region Private Methods
        
        private T GetValue<T>(string name)
        {
            object value;
            if (_bag.TryGetValue(name, out value))
                return (T) value;
        
            return default(T);
        }
        
        #endregion
        
        #region Partial Methods
        
        partial void OnToString(ref string result, ref bool cancel);
        
        #endregion
        
        #region Serialization
        
        protected override void OnGetState(SerializationInfo info, StateMode mode)
        {
            base.OnGetState(info, mode);
            if (_bag.ContainsKey("Id")) info.AddValue("Id", GetValue< System.Int32 >("Id"));
            if (_bag.ContainsKey("FundId")) info.AddValue("FundId", GetValue< System.Int32 >("FundId"));
            if (_bag.ContainsKey("AssetDate")) info.AddValue("AssetDate", GetValue< System.DateTime >("AssetDate"));
            if (_bag.ContainsKey("Shares")) info.AddValue("Shares", GetValue< System.Decimal >("Shares"));
            if (_bag.ContainsKey("Assets")) info.AddValue("Assets", GetValue< System.Decimal >("Assets"));
        }

        protected override void OnSetState(SerializationInfo info, StateMode mode)
        {
            base.OnSetState(info, mode);
            if(info.Values.ContainsKey("Id")) _bag["Id"] = info.GetValue< System.Int32 >("Id");
            if(info.Values.ContainsKey("FundId")) _bag["FundId"] = info.GetValue< System.Int32 >("FundId");
            if(info.Values.ContainsKey("AssetDate")) _bag["AssetDate"] = info.GetValue< System.DateTime >("AssetDate");
            if(info.Values.ContainsKey("Shares")) _bag["Shares"] = info.GetValue< System.Decimal >("Shares");
            if(info.Values.ContainsKey("Assets")) _bag["Assets"] = info.GetValue< System.Decimal >("Assets");
        }

        #endregion
    }
}